// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(uuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  password              String?
  isTwoFactorEnabled    Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  role                  UserRole               @default(USER)
  blog Blog[]
  like Like[]
  comment Comment[]
}
enum UserRole {
  ADMIN
  USER
}


model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}


model Blog{
    id      String   @id @default(uuid())
    title String
    userId String
    desc String
    user User @relation(fields: [userId],references: [id])
    summary String
    category String
    imageUrls String[]
    likes String[] @default([])
    createdAt DateTime @default(now())
    like Like[]
    comment Comment[]
}
model Like{
  id  String @id @default(cuid())
  blogId String
  blog Blog @relation(fields: [blogId],references: [id],onDelete:Cascade)
  userId String
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  createdAt DateTime @default(now())
  @@index([userId,blogId])
}
enum categorySlug{
  technology
  entertainment
  othermatter
}

model Comment {
  id String @id @default(cuid())
  desc String
  blogId String 
  blog Blog @relation(fields: [blogId],references: [id],onDelete: Cascade)
  userId String
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
   createdAt DateTime @default(now())
}